interface CallOptions {
    abi?: string | object[];
    provider?: any;
    network?: string;
    from?: number | string;
    gas?: number;
    gasPrice?: number;
    gasLimit?: number;
    value?: number | string;
    data?: number | string;
    chainId?: number;
    nonce?: number;
    privateKey?: string;
    mnemonic?: string;
}
/**
 * This is a generic method for invoking JSON RPC's `eth_call` with ethers.js.
 *     Use this method to execute a smart contract's constant or non-constant
 *     member without using gas. This is a read-only method intended to read a
 *     value or test a transaction for valid parameters. It does not create a
 *     transaction on the block chain.
 *
 * @param {string} address The Ethereum address the transaction is directed to.
 * @param {string} method The smart contract member in which to invoke.
 * @param {any[]} [parameters] Parameters of the method to invoke.
 * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI
 *     (as JSON object), and ethers.js method overrides. The ABI can be a string
 *     of the single intended method, an array of many methods, or a JSON object
 *     of the ABI generated by a Solidity compiler.
 *
 * @returns {any} Return value of the invoked smart contract member or an error
 *     object if the call failed.
 */
export declare function read(address: string, method: string, parameters?: any[], options?: CallOptions): Promise<any>;
export declare function trx(address: string, method: string, parameters?: any[], options?: CallOptions): Promise<any>;
export {};
